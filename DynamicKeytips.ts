// ==============================================\n// DYNAMIC KEYTIPS SYSTEM - Production Version\n// This extends your existing registry with user customization\n// ==============================================\n\nimport { CommandId } from './CommandExecutor';\nimport { KeyTip, KEYTIPS, validateRegistry } from './KeyTipsRegistry';\n\n// User keytips are stored separately and merged at runtime\nlet USER_KEYTIPS: KeyTip[] = [];\n\n// Load user keytips from localStorage\nexport function loadUserKeytips(): KeyTip[] {\n  try {\n    const saved = localStorage.getItem('user-keytips');\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      // Validate that all user keytips are well-formed\n      USER_KEYTIPS = parsed.filter((keytip: any) => \n        keytip.chord && keytip.command && keytip.label\n      );\n      console.log(`üìÅ Loaded ${USER_KEYTIPS.length} user keytips from localStorage`);\n      return USER_KEYTIPS;\n    }\n  } catch (error) {\n    console.warn('Failed to load user keytips:', error);\n  }\n  return [];\n}\n\n// Save user keytips to localStorage\nexport function saveUserKeytips(keytips: KeyTip[]): boolean {\n  try {\n    // Validate before saving\n    const allKeytips = [...KEYTIPS, ...keytips];\n    const report = validateRegistry(allKeytips);\n    \n    if (report.hasConflicts) {\n      console.error('‚ùå Cannot save user keytips due to conflicts:', report.conflicts);\n      return false;\n    }\n    \n    USER_KEYTIPS = keytips;\n    localStorage.setItem('user-keytips', JSON.stringify(keytips));\n    console.log(`üíæ Saved ${keytips.length} user keytips to localStorage`);\n    return true;\n  } catch (error) {\n    console.error('Failed to save user keytips:', error);\n    return false;\n  }\n}\n\n// Get all keytips (system + user) for the controller to use\nexport function getAllKeytips(): KeyTip[] {\n  return [...KEYTIPS, ...USER_KEYTIPS];\n}\n\n// Add a new user keytip\nexport function addUserKeytip(keytip: Omit<KeyTip, 'group'>): boolean {\n  const newKeytip = { ...keytip, group: keytip.chord[0] };\n  const testKeytips = [...USER_KEYTIPS, newKeytip];\n  \n  if (saveUserKeytips(testKeytips)) {\n    console.log(`‚ûï Added user keytip: [${keytip.chord.join(' ‚Üí ')}] ‚Üí ${keytip.label}`);\n    return true;\n  }\n  return false;\n}\n\n// Remove a user keytip\nexport function removeUserKeytip(chord: string[]): boolean {\n  const chordStr = chord.join(',');\n  const filteredKeytips = USER_KEYTIPS.filter(\n    keytip => keytip.chord.join(',') !== chordStr\n  );\n  \n  if (filteredKeytips.length !== USER_KEYTIPS.length) {\n    saveUserKeytips(filteredKeytips);\n    console.log(`‚ûñ Removed user keytip: [${chord.join(' ‚Üí ')}]`);\n    return true;\n  }\n  return false;\n}\n\n// Get available commands for UI (expand this list as you add more commands)\nexport const AVAILABLE_COMMANDS = [\n  { id: 'clearContent', label: 'Clear Content' },\n  { id: 'clearFormatting', label: 'Clear Formatting' },\n  { id: 'copy', label: 'Copy' },\n  { id: 'cut', label: 'Cut' },\n  { id: 'paste', label: 'Paste' },\n  { id: 'bold', label: 'Bold' },\n  { id: 'italic', label: 'Italic' },\n  { id: 'underline', label: 'Underline' },\n  { id: 'borderAll', label: 'Border All' },\n  { id: 'borderLeft', label: 'Border Left' },\n  { id: 'borderRight', label: 'Border Right' },\n  { id: 'insertRowAbove', label: 'Insert Row Above' },\n  { id: 'insertColumnLeft', label: 'Insert Column Left' },\n  { id: 'deleteRow', label: 'Delete Row' },\n  { id: 'deleteColumn', label: 'Delete Column' },\n  { id: 'sortAsc', label: 'Sort Ascending' },\n  { id: 'freezePanes', label: 'Freeze Panes' },\n  { id: 'unfreezePane', label: 'Unfreeze Panes' },\n] as const;\n\n// Enhanced match function that includes user keytips\nexport function matchChordPrefixDynamic(sequence: string[]) {\n  const allKeytips = getAllKeytips();\n  \n  if (sequence.length === 0) {\n    return { isExact: false, isPrefix: true, possibleMatches: allKeytips };\n  }\n\n  let exactMatch: KeyTip | undefined;\n  let prefixMatches: KeyTip[] = [];\n\n  for (const keytip of allKeytips) {\n    const { chord } = keytip;\n    \n    if (chord.length === sequence.length && chord.every((k, i) => k === sequence[i])) {\n      exactMatch = keytip;\n    }\n    \n    if (chord.length >= sequence.length && sequence.every((k, i) => k === chord[i])) {\n      prefixMatches.push(keytip);\n    }\n  }\n\n  return {\n    isExact: !!exactMatch,\n    isPrefix: prefixMatches.length > 0,\n    match: exactMatch,\n    possibleMatches: prefixMatches\n  };\n}\n\n// Initialize user keytips on module load\nloadUserKeytips();\n\nexport default {\n  loadUserKeytips,\n  saveUserKeytips,\n  getAllKeytips,\n  addUserKeytip,\n  removeUserKeytip,\n  matchChordPrefixDynamic,\n  AVAILABLE_COMMANDS\n};\n